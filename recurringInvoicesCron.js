require('dotenv').config();
const mongoose = require('mongoose');
const cron = require('node-cron');
const Invoice = require('./models/Invoice'); // Adjust path to your model

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('MongoDB connected'))
.catch(err => console.error('MongoDB connection error:', err));

// Function to add days/months/years
function addRecurringDate(currentDate, recurringType, duration) {
  const newDate = new Date(currentDate);

  switch (recurringType) {
    case 'daily':
      newDate.setDate(newDate.getDate() + duration);
      break;
    case 'weekly':
      newDate.setDate(newDate.getDate() + (7 * duration));
      break;
    case 'monthly':
      newDate.setMonth(newDate.getMonth() + duration);
      break;
    case 'yearly':
      newDate.setFullYear(newDate.getFullYear() + duration);
      break;
  }
  return newDate;
}

// Cron job — runs every day at midnight
cron.schedule('0 0 * * *', async () => {
  console.log(`Running recurring invoice cron at ${new Date().toISOString()}`);

  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    const today = new Date();
    const recurringInvoices = await Invoice.find({
      isRecurring: true,
      nextRecurringDate: { $lte: today },
      isDeleted: false
    }).session(session);

    if (recurringInvoices.length === 0) {
      console.log('No recurring invoices to process.');
      await session.commitTransaction();
      session.endSession();
      return;
    }

    for (const inv of recurringInvoices) {
      const newInvoiceData = inv.toObject();
      delete newInvoiceData._id; // Remove old ID so Mongoose generates new one
      delete newInvoiceData.invoiceNumber; // Will be auto-generated by pre-save hook
      newInvoiceData.parentInvoice = inv._id;
      newInvoiceData.invoiceDate = today;
      newInvoiceData.dueDate = addRecurringDate(today, inv.recurring, inv.recurringDuration);
      newInvoiceData.status = 'UNPAID';
      newInvoiceData.nextRecurringDate = addRecurringDate(today, inv.recurring, inv.recurringDuration);

      // Save new invoice
      const newInvoice = new Invoice(newInvoiceData);
      await newInvoice.save({ session });

      // Update original invoice's nextRecurringDate
      inv.nextRecurringDate = addRecurringDate(today, inv.recurring, inv.recurringDuration);
      await inv.save({ session });

      console.log(`Created recurring invoice from ${inv._id} → New ID: ${newInvoice._id}`);
    }

    await session.commitTransaction();
    session.endSession();
    console.log('Recurring invoice cron completed successfully');

  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error('Error in recurring invoice cron:', err);
  }
});

console.log('Recurring invoice cron job scheduled');
